auth_function.php
<?php

	// Performs all actions necessary to log in an admin
	function log_in_admin($admin) {
		// Reentering the ID protects the admin from session fixation.
		session_regenerate_id();
		$_SESSION['admin_id'] = $admin['id'];
		$_SESSION['last_login'] = time();
		$_SESSION['username'] = $admin['username'];
		return true;
	}

	function is_logged_in() {
		// Having a admin_id in the session server a dual-purpose:
		// - Its presence indicates the admin is logged in.
		// - Its value tells which admin for looking up their record.
		return isset($_SESSION['admin_id']);
	}

	// Call require_login() at the top of any page which needs to
	// require a valid login before granting accesses to the page.
	function require_login() {
		if (!is_logged_in()) {
			redirect_to(url_for('/staff/login.php'));
		} else {
			// Do nothing, let the rest of page process.
		}
	}

	function log_out_admin() {
		unset($_SESSION['admin_id']);
		unset($_SESSION['last_login']);
		unset($_SESSION['username']);
		// session_destroy(); // optional: destroy the whole session
		return true;
	}

// Index.php
<?php require_once '../../private/initialize.php'; ?>

<?php // require_login();?>

<?php $page_title = 'Staff Menu'; ?>
<?php include SHARED_PATH . '/staff_header.php'; ?>

<div id="content">
  <div id="main-menu">
    <h2>Main Menu</h2>
    <ul>
      <li>
        <a href="<?php echo url_for('/staff/subjects/index.php'); ?>">Subjects</a>
      </li>
      <li>
        <a href="<?php echo url_for('/staff/admins/index.php'); ?>">Admin</a>
      </li>
    </ul>
  </div>

</div>

<?php include SHARED_PATH . '/staff_footer.php';

// login.php
<?php
    require_once '../../private/initialize.php';

    $errors = [];
    $username = '';
    $password = '';

    if (is_post_request()) {
        $username = $_POST['username'] ?? '';
        $password = $_POST['password'] ?? '';

        echo($username . '<br>');
        echo($password);

        // Validation
        if (is_blank($username)) {
            $errors[] = 'Username cannot be blank';
        }
        if (is_blank($password)) {
            $errors[] = 'Password cannot be blank';
        }

        // If there is no error
        if (empty($errors)) {
            // Using one variable ensure that msg is the same
            $login_failure_msg = 'Log in was unsuccessful.';

            $admin = find_admin_by_username($username);
            if ($admin) {
                if (password_verify($password, $admin['hashed_password'])) {
                    log_in_admin($admin);
                    redirect_to(url_for('/staff/index.php'));
                } else {
                    // Username found but password is different
                    $errors[] = $login_failure_msg;
                }
            } else {
                // no user found
                $errors[] = $login_failure_msg;
            }
        }
    }

?>

<?php $page_title = 'Log in'; ?>
<?php include SHARED_PATH . '/staff_header.php'; ?>

<div id="content">
	<h1>Log in</h1>

	<?php echo display_errors($errors); ?>

	<form action="login.php" method="post">
		Username:
		<br/>
		<input type="text" name="username" value="<?php echo h($username); ?>" />
		<br/> Password:
		<br/>
		<input type="text" name="password" value="" />
		<br/>
		<input type="submit" name="submit" value="Submit" />
	</form>

</div>

<?php include SHARED_PATH . '/staff_footer.php';

//validate_function.php
<?php

	// is_blank('abcd')
	// * validate data presence
	// * uses trim() so empty spaces don't count
	// * uses === to avoid false positives
	// * better than empty() which considers "0" to be empty
	function is_blank($value) {
		return !isset($value) || trim($value) === '';
	}

	// has_presence('abcd')
	// * validate data presence
	// * reverse of is_blank()
	// * I prefer validation names with "has_"
	function has_presence($value) {
		return !is_blank($value);
	}

	// has_length_greater_than('abcd', 3)
	// * validate string length
	// * spaces count towards length
	// * use trim() if spaces should not count
	function has_length_greater_than($value, $min) {
		$length = strlen($value);
		return $length > $min;
	}

	// has_length_less_than('abcd', 5)
	// * validate string length
	// * spaces count towards length
	// * use trim() if spaces should not count
	function has_length_less_than($value, $max) {
		$length = strlen($value);
		return $length < $max;
	}

	// has_length_exactly('abcd', 4)
	// * validate string length
	// * spaces count towards length
	// * use trim() if spaces should not count
	function has_length_exactly($value, $exact) {
		$length = strlen($value);
		return $length == $exact;
	}

	// has_length('abcd', ['min' => 3, 'max' => 5])
	// * validate string length
	// * combines functions_greater_than, _less_than, _exactly
	// * spaces count towards length
	// * use trim() if spaces should not count
	function has_length($value, $options) {
		if (isset($options['min']) && !has_length_greater_than($value, $options['min'] - 1)) {
			return false;
		} elseif (isset($options['max']) && !has_length_less_than($value, $options['max'] + 1)) {
			return false;
		} elseif (isset($options['exact']) && !has_length_exactly($value, $options['exact'])) {
			return false;
		} else {
			return true;
		}
	}

	// has_inclusion_of( 5, [1,3,5,7,9] )
	// * validate inclusion in a set
	function has_inclusion_of($value, $set) {
		return in_array($value, $set);
	}

	// has_exclusion_of( 5, [1,3,5,7,9] )
	// * validate exclusion from a set
	function has_exclusion_of($value, $set) {
		return !in_array($value, $set);
	}

	// has_string('nobody@nowhere.com', '.com')
	// * validate inclusion of character(s)
	// * strpos returns string start position or false
	// * uses !== to prevent position 0 from being considered false
	// * strpos is faster than preg_match()
	function has_string($value, $required_string) {
		return strpos($value, $required_string) !== false;
	}

	// has_valid_email_format('nobody@nowhere.com')
	// * validate correct format for email addresses
	// * format: [chars]@[chars].[2+ letters]
	// * preg_match is helpful, uses a regular expression
	//    returns 1 for a match, 0 for no match
	//    http://php.net/manual/en/function.preg-match.php
	function has_valid_email_format($value) {
		$email_regex = '/\A[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\Z/i';
		return preg_match($email_regex, $value) === 1;
	}

	// has_unique_page_menu_name('History')
	// * Validates uniqueness of pages.menu_name
	// * For new records, provide only the menu_name.
	// * For existing records, provide current ID as second arugment
	//   has_unique_page_menu_name('History', 4)
	function has_unique_page_menu_name($menu_name, $current_id = "0") {
		global $db;

		$sql = "SELECT * FROM pages ";
		$sql .= "WHERE menu_name='" . db_escape($db, $menu_name) . "' ";
		$sql .= "AND id != '" . db_escape($db, $current_id) . "'";

		$page_set = mysqli_query($db, $sql);
		$page_count = mysqli_num_rows($page_set);
		mysqli_free_result($page_set);

		return $page_count === 0;
	}

	function has_unique_admin_username($username, $current_id = "0") {
		global $db;

		$sql = "SELECT * FROM admins ";
		$sql .= "WHERE username='" . db_escape($db, $username) . "' ";
		$sql .= "AND id != '" . db_escape($db, $current_id) . "'";

		$page_set = mysqli_query($db, $sql);
		$page_count = mysqli_num_rows($page_set);
		mysqli_free_result($page_set);

		return $page_count === 0;
	}

	// Has
	function has_validate_password($password) {
		$password_upper_regexp = "/[A-Z]/";
		$password_lower_regexp = "/[a-z]/";
		$password_number_regexp = "/[0-9]/";
		$password_symbol_regexp = "/[\W]+/";

		return (bool) (preg_match($password_upper_regexp, $password) && preg_match($password_lower_regexp, $password) && preg_match($password_number_regexp, $password) && preg_match($password_symbol_regexp, $password));
	}




